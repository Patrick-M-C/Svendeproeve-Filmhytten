@page "/Confirmation"
@rendermode InteractiveServer

@using System.Timers
@using Svendeprøve.Components.Models
@using Svendeprøve.Components.Services
@inject NavigationManager NavigationManager
@inject MovieService MovieService
@inject HallService HallService
@implements IDisposable

@* 
    Blazor-komponent til visning af en bekræftelsesside efter billetkøb.
    Viser valgt film og sal, en takbesked og omdirigerer automatisk til forsiden efter 5 sekunder.
*@

<div class="confirmation-container">
    <h1 class="text-center">Tak for dit køb af billet til Tin Soldier, i hal nummer 3, Nyd forstillingen</h1>
    @if (!string.IsNullOrEmpty(selectedMovieTitle) && !string.IsNullOrEmpty(selectedHallName))
    {
        <p class="text-center">Du har booket <strong>@selectedMovieTitle</strong> i sal <strong>@selectedHallName</strong>.</p>
    }
    <p class="text-center">Du vil blive omdirigeret om @remainingSeconds sekunder...</p>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? movieId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? hallId { get; set; }

    private int remainingSeconds = 5;
    private Timer? timer;

    private string? selectedMovieTitle;
    private string? selectedHallName;

    protected override async Task OnInitializedAsync()
    {
        if (movieId.HasValue)
        {
            var movie = await MovieService.GetMovieByIdAsync(movieId.Value);
            selectedMovieTitle = movie?.Title;
        }
        if (hallId.HasValue)
        {
            var hall = await HallService.GetHallByIdAsync(hallId.Value);
            selectedHallName = hall?.Name;
        }

        timer = new Timer(1000);
        timer.Elapsed += async (sender, e) => await OnTimerElapsed();
        timer.AutoReset = true;
        timer.Start();
    }

    private async Task OnTimerElapsed()
    {
        remainingSeconds--;

        if (remainingSeconds <= 0)
        {
            timer?.Stop();
            await InvokeAsync(() => NavigationManager.NavigateTo("/"));
        }
        else
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
    }
}

<style>
    .confirmation-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        padding: 20px;
    }

    h1 {
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    p {
        font-size: 1.2rem;
        color: #666;
        margin: 5px 0;
    }
</style>
