@page "/Seats"
@using Svendeprøve.Components.Models
@using Svendeprøve.Components.Services
@rendermode InteractiveServer
@inject HallService HallService
@inject NavigationManager NavigationManager

<h1>Bekræft din booking</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-center text-danger">@errorMessage</p>
}

@if (hall == null)
{
    <p class="text-center">Indlæser hal...</p>
}
else
{
    <div class="hall-container">
        <div class="hall">
            <h3>@hall.Name</h3>
            <p>@availableSeats ud af @hall.SeatCount sæder er tilgængelige.</p>
            <div class="seat-info">
                <button class="btn btn-primary" @onclick="ConfirmBooking">Bekræft Booking</button>
            </div>
        </div>
    </div>
}

@code {
    private Hall? hall;
    private int availableSeats;
    private string? errorMessage;
    private int? movieId;
    private int? hallId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Hent movieId og hallId fra query-parametre
            var uri = new Uri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

            if (query["movieId"] == null || !int.TryParse(query["movieId"], out var parsedMovieId))
            {
                errorMessage = "Ingen film valgt. Gå tilbage og vælg en film.";
                Console.WriteLine(errorMessage);
                return;
            }
            movieId = parsedMovieId;

            if (query["hallId"] == null || !int.TryParse(query["hallId"], out var parsedHallId))
            {
                errorMessage = "Ingen hal valgt. Angiv en hal.";
                Console.WriteLine(errorMessage);
                return;
            }
            hallId = parsedHallId;

            // Hent haller fra databasen
            var halls = await HallService.GetHallsAsync();
            if (!halls.Any())
            {
                errorMessage = "Ingen haller fundet i databasen.";
                Console.WriteLine(errorMessage);
                return;
            }

            // Vælg hal baseret på hallId
            hall = halls.FirstOrDefault(h => h.Id == hallId);
            if (hall == null)
            {
                errorMessage = $"Hal med ID {hallId} blev ikke fundet.";
                Console.WriteLine(errorMessage);
                return;
            }

            // Beregn tilgængelige sæder
            availableSeats = hall.Seats.Count(s => !s.IsReserved);
            Console.WriteLine($"Loaded hall: {hall.Name} (ID: {hall.Id}) with {availableSeats} available seats out of {hall.SeatCount} for movie ID: {movieId}");
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Kunne ikke hente hal: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        catch (Exception ex)
        {
            errorMessage = $"Uventet fejl: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task ConfirmBooking()
    {
        try
        {
            if (movieId == null)
            {
                errorMessage = "Ingen film valgt.";
                Console.WriteLine(errorMessage);
                return;
            }

            if (hall == null)
            {
                errorMessage = "Ingen hal valgt.";
                Console.WriteLine(errorMessage);
                return;
            }

            if (availableSeats == 0)
            {
                errorMessage = "Ingen tilgængelige sæder i denne hal.";
                Console.WriteLine(errorMessage);
                return;
            }

            // Hypotetisk kald til at reservere en plads (skal implementeres i HallService)
            // await HallService.ReserveSeatsAsync(hall.Id, movieId.Value, numberOfSeats: 1);
            Console.WriteLine($"Booking confirmed for movie ID: {movieId}, hall ID: {hall.Id}, 1 seat reserved");

            // Naviger tilbage til filmoversigten eller til en bekræftelsesside
            NavigationManager.NavigateTo("/movies");
            errorMessage = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved bekræftelse af booking: {ex.Message}";
            Console.WriteLine(errorMessage);
            StateHasChanged();
        }
    }
}

<style>
    .hall-container {
        display: flex;
        justify-content: center;
        padding: 20px;
    }

    .hall {
        text-align: center;
    }

    .seat-info {
        margin-top: 20px;
        font-size: 16px;
    }

    .btn-primary {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .text-danger {
        color: #dc3545; /* Bootstrap rød farve til fejl */
    }
</style>