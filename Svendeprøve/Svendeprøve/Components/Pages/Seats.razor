@page "/Seats"
@using Svendeprøve.Components.Models
@using Svendeprøve.Components.Services
@rendermode InteractiveServer
@inject HallService HallService
@inject NavigationManager NavigationManager

<h1>Sæder i hal</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-center text-danger">@errorMessage</p>
}

@if (hall == null || seats == null)
{
    <p class="text-center">Indlæser sæder...</p>
}
else
{
    <div class="hall-container">
        <div class="hall">
            <h3>@hall.Name (@hall.SeatCount sæder)</h3>
            <div class="screen"></div>
            <div class="seat-labels">
                <div class="row-labels">
                    @foreach (var row in seats.Select(s => s.Row).Distinct().OrderBy(r => r))
                    {
                        <div class="row-label">Række @row</div>
                    }
                </div>
                <div class="seats" style="grid-template-columns: repeat(@GetColumns(seats), 30px);">
                    @foreach (var seat in seats.OrderBy(s => s.Row).ThenBy(s => s.SeatNumber))
                    {
                        <div class="seat @(GetSeatCssClass(seat))"
                             title="Række @seat.Row, Sæde @seat.SeatNumber"
                             @onclick="() => ToggleSeatSelection(seat)">
                            @seat.SeatNumber
                        </div>
                    }
                </div>
            </div>
            <div class="seat-info">
                <p>@(selectedSeats.Count) sæder valgt ud af @seats.Count(s => !s.IsReserved) tilgængelige.</p>
                <button class="btn btn-primary" @onclick="ConfirmBooking" disabled="@(selectedSeats.Count == 0)">Bekræft Booking</button>
            </div>
        </div>
    </div>
}

@code {
    private Hall? hall;
    private List<Seat>? seats;
    private string? errorMessage;
    private int? hallId;

    private HashSet<Seat> selectedSeats = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = new Uri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

            if (query["hallId"] == null || !int.TryParse(query["hallId"], out var parsedHallId))
            {
                errorMessage = "Ingen hal valgt. Angiv en hal.";
                return;
            }
            hallId = parsedHallId;

            hall = await HallService.GetHallByIdAsync(hallId.Value);
            if (hall == null)
            {
                errorMessage = "Ingen haller fundet i databasen.";
                seats = new List<Seat>();
                return;
            }

            seats = hall.Seats ?? new List<Seat>();
            if (!seats.Any())
            {
                errorMessage = $"Ingen sæder fundet for hal {hall.Name}.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl ved hentning af sæder: {ex.Message}";
            seats = new List<Seat>();
        }
    }

    private int GetColumns(List<Seat> seats)
    {
        return seats.Any() ? seats.GroupBy(s => s.Row).Max(g => g.Count()) : 1;
    }

    private string GetSeatCssClass(Seat seat)
    {
        if (seat.IsReserved)
            return "reserved";

        if (selectedSeats.Contains(seat))
            return "selected";

        return "available";
    }

    private void ToggleSeatSelection(Seat seat)
    {
        if (seat.IsReserved)
            return; // Kan ikke vælge reserverede sæder

        if (selectedSeats.Contains(seat))
            selectedSeats.Remove(seat);
        else
            selectedSeats.Add(seat);
    }

    private void ConfirmBooking()
    {
        if (selectedSeats.Count == 0)
        {
            errorMessage = "Vælg venligst mindst ét sæde før booking.";
            return;
        }

        // Her kan du implementere logik til at gemme de valgte sæder eller sende dem videre

        // For demo navigerer vi bare til Confirmation-siden
        NavigationManager.NavigateTo("/Confirmation");
    }
}

<style>
    .hall-container {
        display: flex;
        justify-content: center;
        padding: 20px;
    }

    .hall {
        text-align: center;
    }

    .screen {
        width: 300px;
        height: 20px;
        background-color: #666;
        margin: 0 auto 20px;
    }

    .seat-labels {
        display: flex;
    }

    .row-labels {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-right: 10px;
    }

    .row-label {
        height: 30px;
        line-height: 30px;
        font-size: 14px;
        color: #333;
    }

    .seats {
        display: grid;
        gap: 5px;
        justify-content: center;
    }

    .seat {
        width: 30px;
        height: 30px;
        border: 1px solid #ccc;
        line-height: 30px;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease;
        text-align: center;
        font-weight: bold;
    }

        .seat.available {
            background-color: #90EE90; /* Ledige sæder (grøn) */
        }

        .seat.reserved {
            background-color: #ff5555; /* Reserverede sæder (rød) */
            cursor: not-allowed;
        }

        .seat.selected {
            background-color: #007bff; /* Valgte sæder (blå) */
            color: white;
        }

    .seat-info {
        margin-top: 20px;
        font-size: 16px;
    }

    .btn-primary {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

        .btn-primary:disabled {
            background-color: #cccccc;
            border-color: #cccccc;
            cursor: not-allowed;
        }

    .text-danger {
        color: #dc3545; /* Bootstrap rød farve til fejl */
    }
</style>
