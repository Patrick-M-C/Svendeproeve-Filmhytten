@page "/admin"
@using Svendeprøve.Components.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Svendeprøve.Data
@attribute [Authorize(Roles = "Admin")]

@inject UserService UserService
@inject NavigationManager Navigation

<h3>Admin Panel</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info">@message</div>
}

<h4>Opret ny bruger</h4>
<EditForm Model="newUser" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />
    <div class="form-group mb-2">
        <label>Email:</label>
        <InputText class="form-control" @bind-Value="newUser.Email" />
        <ValidationMessage For="() => newUser.Email" />
    </div>
    <div class="form-group mb-3">
        <label>Adgangskode:</label>
        <InputText type="password" class="form-control" @bind-Value="newUser.Password" />
        <ValidationMessage For="() => newUser.Password" />
    </div>
    <button type="submit" class="btn btn-success">Opret</button>
</EditForm>

<hr />

<h4>Eksisterende brugere</h4>

@if (users == null)
{
    <p>Indlæser brugere...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Email</th>
                <th>Handlinger</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditUser(user.Id)">Rediger</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Slet</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ApplicationUser> users;
    private NewUserModel newUser = new();
    private string message;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsersAsync();
    }

    private async Task CreateUser()
    {
        var result = await UserService.CreateUserAsync(newUser.Email, newUser.Password);
        if (result.Succeeded)
        {
            message = "Bruger oprettet succesfuldt!";
            newUser = new NewUserModel();
            users = await UserService.GetAllUsersAsync();
        }
        else
        {
            message = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    private void EditUser(string userId)
    {
        Navigation.NavigateTo($"/admin/edit/{userId}");
    }

    private async Task DeleteUser(string userId)
    {
        var result = await UserService.DeleteUserAsync(userId);
        if (result.Succeeded)
        {
            message = "Bruger slettet succesfuldt!";
            users = await UserService.GetAllUsersAsync();
        }
        else
        {
            message = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    private class NewUserModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
